const input: [f64; 100] = [103376.0, 137623.0, 68454.0, 58133.0, 61015.0, 116383.0, 140128.0, 89136.0, 51424.0, 70304.0, 102774.0, 97379.0, 84863.0, 141276.0, 145979.0, 74658.0, 90303.0, 132694.0, 105438.0, 122561.0, 120795.0, 109609.0, 54936.0, 79878.0, 116519.0, 128765.0, 80686.0, 131652.0, 114035.0, 58722.0, 75602.0, 124920.0, 103586.0, 130337.0, 141906.0, 144110.0, 62813.0, 85774.0, 117135.0, 67600.0, 90364.0, 134128.0, 84632.0, 123047.0, 139372.0, 139431.0, 108657.0, 133502.0, 104636.0, 54475.0, 55535.0, 139116.0, 51999.0, 115467.0, 55044.0, 144280.0, 130497.0, 148374.0, 95362.0, 70575.0, 71362.0, 129912.0, 75244.0, 148802.0, 130203.0, 143033.0, 99100.0, 105136.0, 54304.0, 68539.0, 54939.0, 147045.0, 73775.0, 137798.0, 67588.0, 133550.0, 98726.0, 114631.0, 146613.0, 85018.0, 112986.0, 82081.0, 121413.0, 102317.0, 54296.0, 138394.0, 66992.0, 90480.0, 60262.0, 88846.0, 110095.0, 123471.0, 95487.0, 90791.0, 74350.0, 113870.0, 97581.0, 129236.0, 77417.0, 123082.0,];

fn main() {
	println!("--- Day 1: The Tyranny of the Rocket Equation ---");
	println!("Part One: {}", PART_ONE());
	println!("Part Two: {}", PART_TWO());
}

fn PART_ONE() -> i32 {
	input.iter().map(|n| (n / 3.0).floor() as i32 - 2).sum()
}
fn PART_TWO() -> i32 {
	input.iter().map(recursive_fuel).sum()
}

fn recursive_fuel(n: &f64) -> i32 {
	let result: i32 = (n / 3.0).floor() as i32 - 2;
	if result <= 0 {
		0
	} else {
		result + recursive_fuel(&(result as f64))
	}
}
